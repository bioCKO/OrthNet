#!/usr/bin/env python

synopsis = "\n\n usage: format_OrthNetEdges_4SIF.py <input.clustered.edges>\n\
 \n\
 1. Input\n\
	- expect the format same as the '*.clustered.edges' file generated by 'create_ortholog_network.py'.\n\
	- i.e. <clusterID>, <queryID>, <subjectID>, <CLtype_fwd>, <CLtype_rev>, tab-delimited.\n\
 2. Output\n\
	- output file name will have '.sif' added to the input file name.\n\
	- output file contains <queryID>, <CLtype>, <subjectID>, and <clusterID>, tab-delimited.\n\
	- when <CLtype_fwd> == <CLtype_rev>, <CLtype> = <CLtype_fwd> + '_rc' (for 'reciprocal')\n\
	- when <CLtype_fwd> != <CLtype_rev>, edges for both directions are printed separately.\n\
\n\
 by ohdongha@gmail.com \n\
 20160913 ver 0.1\n\n"

#20160913 ver 0.1 # deals with '_BHx' and '_BHmx' tags
#20160529 ver 0.0
 
import sys
import subprocess
	
try: 
	fin = open(sys.argv[1], "rU")
	fout = open(sys.argv[1].strip() + ".sif", "w")
except (ValueError, IndexError) :
	print synopsis
	sys.exit(0)


clusterID = ""
queryID = ""
subjectID = ""
CLtype_fwd = ""
CLtype_rev = ""
header = True

# reading in and counting <input.txt>

for line in fin:
	tok = line.split('\t')
	try:
		clusterID = tok[0].strip()
		queryID = tok[1].strip()
		subjectID = tok[2].strip()
		CLtype_fwd = tok[3].strip()
		CLtype_rev = tok[4].strip()
	except IndexError :
		print "there is an invalid line in the input file. ^-_-^"
		
	if header == True:
		header = False	
	else:
		# ignore the '_BHx' or 'BHmx' tags for the moment
		if CLtype_fwd.split('_')[0] == CLtype_rev.split('_')[0]:
			fout.write(queryID + '\t' + CLtype_fwd.split('_')[0] + '_rc\t' + subjectID + '\t' + clusterID + '\n')
#		elif CLtype_fwd == '-':	
#			fout.write(subjectID + '\t' + CLtype_rev + '\t' + queryID + '\t' + clusterID + '\n')
#		elif CLtype_rev == '-':	
#			fout.write(queryID + '\t' + CLtype_fwd + '\t' + subjectID + '\t' + clusterID + '\n')
		else:
			fout.write(queryID + '\t' + CLtype_fwd.split('_')[0] + '\t' + subjectID + '\t' + clusterID + '\n')
			fout.write(subjectID + '\t' + CLtype_rev.split('_')[0] + '\t' + queryID + '\t' + clusterID + '\n')
fin.close()
fout.close()
print("done")

#!/usr/bin/env python
import sys, os, re, math, argparse
from argparse import RawTextHelpFormatter


###################################################
### 0. script description and parsing arguments ###
###################################################
synopsis1 = "\
 parse .tsv format results of 'mmseqs cluster' and 'mmseqs create tsv' runs\n\
 and create .PG input for 'TDfinder.py'"
synopsis2 = "detailed description:\n\
 0. Pre-requisite: a .tsv format output file for all representative protein\n\
     models in a genome, generated by MMSeqs2 clustering.\n\
 1. Input arguments, parameters, and options:\n\
  - <input.tsv> contains the sequence ID representing the cluster and the\n\
     sequence ID of the cluster member, one member per line, tab-delimited;\n\
     see https://github.com/soedinglab/mmseqs2/wiki#cluster-tsv-format\n\
 2. Output file and options:\n\
  - <output.PG> included geneID and clusterID, tab-delimited,\n\
  - clusters are numbered numerically, from '00001' to 'XXXXX' with appropriate\n\
     number of '0's (i.e., rjust).\n\
  - '-H': add a Header line 'geneID\tPG>';default=False,\n\
by ohdongha@gmail.com 20180605 ver 0.0\n\n"
#version_history
#20180605 ver 0.0 

parser = argparse.ArgumentParser(description = synopsis1, epilog = synopsis2, formatter_class = RawTextHelpFormatter)

# positional parameters
parser.add_argument('input_tsv', type=argparse.FileType('r'), help="See below")
parser.add_argument('output_PG', type=argparse.FileType('w'), help="See below")
# options
parser.add_argument('-H', dest="Header", action="store_true", default=False)

args = parser.parse_args()


############################################
### 1. read input and assign cluster IDs ###
############################################
clusterID = "" 
geneID = ""
geneID_list = []

clusterID_numeric = 0
digit_for_clusterID = 0
num_clusterd_genes = 0

cluster_member_dict = dict() # key = clusterID, value = list of members
cluster_size_dict = dict() # key = clusterID, value = number of members
cluster_newID_dict = dict() # key = clusterID, value = new clusterID, ordered from PG0001 to PGXXXX, sorted from the largest to smallest clusters
gene_newID_dict = dict() # key = geneID, value = new clusterID

# reading input
for line in args.input_tsv:
	tok = line.split('\t')
	clusterID = tok[0].strip()
	geneID = tok[1].strip()
	geneID_list.append(geneID)
	if clusterID not in cluster_member_dict:
		cluster_member_dict[clusterID] = [geneID]
	else:
		cluster_member_dict[clusterID].append(geneID)
args.input_tsv.close()

for cID in cluster_member_dict:
	if len(cluster_member_dict[cID]) > 1: # discard clusters with single members
		cluster_size_dict[cID] = len(cluster_member_dict[cID])
		
digit_for_clusterID = int(math.log(len( cluster_size_dict ),10)) + 1

# sorting and assigning the new clusterID
for key, value in sorted(cluster_size_dict.iteritems(), key=lambda (k,v): (v,k), reverse=True):
	clusterID_numeric += 1
	num_clusterd_genes += cluster_size_dict[key]
	cluster_newID_dict[key] = "PG" + str(clusterID_numeric).rjust(digit_for_clusterID, '0')
	
for cID in cluster_newID_dict:
	for gID in cluster_member_dict[cID]:
		gene_newID_dict[gID] = cluster_newID_dict[cID]
		
		
#######################
### 2. print output ###
#######################
if args.Header:
	args.output_PG.write("geneID\tPG\n")
	
for gID in geneID_list:
	if gID in gene_newID_dict:
		args.output_PG.write("%s\t%s\n" % (gID, gene_newID_dict[gID] ))
args.output_PG.close()

print "identified %d clusters containing %d genes" % (len( cluster_size_dict ), num_clusterd_genes)
print "done"
		
